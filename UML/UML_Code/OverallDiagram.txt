@startuml
actor User #purple
participant "Front-End Interface" as Frontend #orange
participant "API Module" as API #418BFB
participant "Core Module" as Core #418BFB
participant Wallet #23EA0D
participant "P2P Network" as Network #FAE107
participant Miners #F445FC
database "Data Persistence Storage" as Storage #AC6203

User -> Frontend: login(email, password)
activate Frontend #FCC25D

Frontend -> Core: verifyUser(email, password)
activate Core #8EB9FB
Core -> Storage: Check if a combination of Email and Password Exists
activate Storage #D49336
Storage --> Core: Result
deactivate Storage #D49336
Core --> Frontend: Return (verificationResult, userId)
deactivate Core

Frontend --> User: loginResult
deactivate Frontend

alt loginResult == Success
    User -> Frontend: selectElection(electionId)

    User -> Frontend: vote(candidateId)
    activate Frontend #FCC25D
    Frontend -> API: Handover request
    activate API #8EB9FB
    API -> Core: castVote(userId, candidateId)
    activate Core #8EB9FB

    Core -> Wallet: createTransaction(userId, candidateId)
    activate Wallet #8FFE82
    Wallet -> Core: Return (publicKey, transaction, transactionId)
    deactivate Wallet

    Core --> API: (transactionId, voteSubmissionResult)
    API --> Frontend: Return (transactionId, voteSubmissionResult)
    deactivate API

    alt voteSubmissionResult == Success
        Frontend --> User: Return (transactionId, voteSubmissionResult)
    else voteSubmissionResult == Failure
        Frontend --> User: voteSubmissionResult
        deactivate Frontend
    end

    group Background process begins
    alt voteSubmissionResult == Success
        Core -> Network: sendTransaction(transaction, userId, publicKey)
        activate Network #FCEC5B

        Network -> Miners: broadcastTransaction(transaction)
        activate Miners #FC74F6
        Miners -> Miners: verifyTransaction(transaction)
        Miners -> Network: transactionVerificationResult

        alt transactionVerificationResult == Approved
            Miners -> Miners: mine(transaction)
            Miners -> Network: broadcastValidBlock(block)
            Network -> Miners: updateLedger(block)
            Miners -> Storage: store(block)
            activate Storage #D49336
            Storage --> Miners: Result
            deactivate Storage
            Miners --> Network: notificationAboutstatusOfTheVote
            deactivate Miners
        end

        Network --> Core: notificationAboutstatusOfTheVote
        deactivate Network
     end
        Core --> API: notificationAboutstatusOfTheVote
        deactivate Core
        API --> Frontend: notificationAboutstatusOfTheVote
        Frontend --> User: notificationAboutstatusOfTheVote
    end

    User -> Frontend: verifyVote()
    activate Frontend #FCC25D
    Frontend -> Core: checkVote(transactionId, publicKey)
    activate Core #8EB9FB
    Core -> Network: broadcastCheckVote(transactionId, publicKey)
    activate Network #FCEC5B

    Network -> Miners: broadcastCheckVote(transactionId, publicKey)
    activate Miners #FC74F6

    Miners -> Storage: Check if a transaction with 'transactionId' exists
    activate Storage #D49336
    Storage --> Miners: Result
    deactivate Storage #D49336

    Miners --> Network: verificationResult
    deactivate Miners #FC74F6

    Network --> Core: verificationResult
    deactivate Network #FCEC5B
    Core --> Frontend: verificationResult
    deactivate Core #8EB9FB
    Frontend --> User: verificationResult
    deactivate Frontend
end
@enduml
